CREATE TABLE PESSOA (
    CPF CHAR(14), -- FAZER CHECK CPF
    NOME VARCHAR2(20) NOT NULL,
    CONSTRAINT PK_PESSOA PRIMARY KEY (CPF),
    CONSTRAINT CK_PESSOA_NOME CHECK (UPPER(NOME) = NOME),
    CONSTRAINT CK_PESSOA_CPF CHECK(REGEXP_LIKE(CPF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}'))
);

CREATE TABLE MEMBRO (
    CPF CHAR(14),
    FUNCAO VARCHAR2(10),
    CONSTRAINT PK_MEMBRO PRIMARY KEY (CPF, FUNCAO),
    CONSTRAINT FK_MEMBRO_CPF FOREIGN KEY (CPF)
                             REFERENCES PESSOA(CPF)
                             ON DELETE CASCADE,
    CONSTRAINT CK_MEMBRO_FUNCAO CHECK(FUNCAO IN ('FINANCEIRO', 'MARKETING')),
    CONSTRAINT CK_MEMBRO_CPF CHECK(REGEXP_LIKE(CPF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}'))
);

CREATE TABLE DOADOR (
    CPF CHAR(14),
    CONSTRAINT PK_DOADOR PRIMARY KEY (CPF),
    CONSTRAINT FK_DOADOR_CPF FOREIGN KEY (CPF)
                             REFERENCES PESSOA(CPF)
                             ON DELETE CASCADE,
    CONSTRAINT CK_DOADOR_CPF CHECK(REGEXP_LIKE(CPF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}'))
);

CREATE TABLE ADOTANTE (
    CPF CHAR(14),
    RUA VARCHAR2(50),
    NUMERO NUMBER,
    BAIRRO VARCHAR2(50),
    CIDADE VARCHAR2(30),
    CONSTRAINT PK_ADOTANTE PRIMARY KEY (CPF),
    CONSTRAINT FK_ADOTANTE_CPF FOREIGN KEY (CPF)
                               REFERENCES PESSOA(CPF)
                               ON DELETE CASCADE,
    CONSTRAINT CK_ADOTANTE_CPF CHECK(REGEXP_LIKE(CPF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}'))
);

-- CHECAR FUNCAO MEMBRO PAGAMENTO SE EH FINANCEIRO. DONE
CREATE TABLE GASTOS (
    NOTA_FISCAL VARCHAR2(9),
    ORIGEM VARCHAR2(16) NOT NULL,
    VALOR_DO_GASTO NUMBER NOT NULL,
    MEMBRO_PAGAMENTO CHAR(14),
    FUNCAO VARCHAR2(10),
    CONSTRAINT PK_GASTOS PRIMARY KEY (NOTA_FISCAL),
    CONSTRAINT FK_GASTOS FOREIGN KEY (MEMBRO_PAGAMENTO, FUNCAO)
                         REFERENCES MEMBRO(CPF, FUNCAO)
                         ON DELETE SET NULL,
    CONSTRAINT CK_GASTOS_MEMBRO_PAGAMENTO CHECK(REGEXP_LIKE(MEMBRO_PAGAMENTO, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')),
    CONSTRAINT CK_GASTOS_FUNCAO CHECK (FUNCAO LIKE 'FINANCEIRO')
);

CREATE TABLE ABRIGO_TEMPORARIO (
    NOTA_FISCAL VARCHAR2(9),
    RUA VARCHAR2(50) NOT NULL,
    NUMERO NUMBER NOT NULL,
    CONSTRAINT PK_ABRIGO_TEMPORARIO PRIMARY KEY (NOTA_FISCAL),
    CONSTRAINT FK_ABRIGO_TEMPORARIO FOREIGN KEY (NOTA_FISCAL)
                                    REFERENCES GASTOS(NOTA_FISCAL)
                                    ON DELETE CASCADE
);

CREATE TABLE GATO (
    NOME VARCHAR2(20),
    RACA VARCHAR2(20),
    CONDICAO VARCHAR2(10) NOT NULL,
    MEMBRO_ANUNCIANTE CHAR(14),
    FUNCAO VARCHAR2(10),
    CONSTRAINT PK_GATO PRIMARY KEY (NOME),
    CONSTRAINT FK_GATO FOREIGN KEY (MEMBRO_ANUNCIANTE, FUNCAO)
                       REFERENCES MEMBRO(CPF, FUNCAO)
                       ON DELETE SET NULL,
    CONSTRAINT CK_GATO_CONDICAO CHECK(UPPER(CONDICAO) IN ('RESGATADO', 'ADOTADO', 'LIVRE')),
    CONSTRAINT CK_GATO_MEMBRO_ANUNCIANTE CHECK(REGEXP_LIKE(MEMBRO_ANUNCIANTE, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')),
    CONSTRAINT CK_GATO_NOME CHECK (UPPER(NOME) = NOME),
    CONSTRAINT CK_GATO_RACA CHECK (UPPER(RACA) = RACA)
);

CREATE TABLE GATO_ADOTADO (
    NOME VARCHAR2(20),
    ADOTANTE CHAR(14),
    CONSTRAINT PK_GATO_ADOTADO PRIMARY KEY (NOME),
    CONSTRAINT FK_GATO_ADOTADO_NOME FOREIGN KEY (NOME)
                            REFERENCES GATO(NOME)
                            ON DELETE CASCADE,
    CONSTRAINT FK_GATO_ADOTADO_ADOTANTE FOREIGN KEY (ADOTANTE)
                           REFERENCES ADOTANTE(CPF)
                           ON DELETE CASCADE,
    CONSTRAINT CK_GATO_ADOTADO_ADOTANTE CHECK(REGEXP_LIKE(ADOTANTE, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')),
    CONSTRAINT CK_GATO_ADOTADO_NOME CHECK (UPPER(NOME) = NOME)
);

CREATE TABLE GATO_RESGATADO (
    NOME VARCHAR2(20),
    CASTRADO CHAR(1),
    ABRIGO VARCHAR2(20) NOT NULL,
    CONSTRAINT PK_GATO_RESGATADO PRIMARY KEY (NOME),
    CONSTRAINT FK_GATO_RESGATADO_NOME FOREIGN KEY (NOME)
                                      REFERENCES GATO(NOME)
                                      ON DELETE CASCADE,
    CONSTRAINT FK_GATO_RESGATADO_ABRIGO FOREIGN KEY (ABRIGO)
                                        REFERENCES ABRIGO_TEMPORARIO(NOTA_FISCAL)
                                        ON DELETE CASCADE,
    CONSTRAINT CK_GATO_RESGATADO_ABRIGO CHECK (UPPER(CASTRADO) IN ('Y', 'N')),
    CONSTRAINT CK_GATO_RESGATADO_NOME CHECK (UPPER(NOME) = NOME)
);

CREATE TABLE GATO_LIVRE (
    NOME VARCHAR2(20),
    CONSTRAINT PK_GATO_LIVRE PRIMARY KEY (NOME),
    CONSTRAINT FK_GATO_LIVRE_NOME FOREIGN KEY (NOME)
                                  REFERENCES GATO(NOME)
                                  ON DELETE CASCADE,
    CONSTRAINT CK_GATO_LIVRE_NOME CHECK (UPPER(NOME) = NOME)
);

CREATE TABLE VETERINARIO (
    NOTA_FISCAL VARCHAR2(20),
    CRMV INTEGER, -- NECESSARIO CHECAR O TAMANHO CORRETO DA STRING
    NOME VARCHAR2(20),
    GATO VARCHAR2(20) NOT NULL,
    CONSTRAINT PK_VETERINARIO PRIMARY KEY (NOTA_FISCAL),
    CONSTRAINT FK_VETERINARIO_NOTA_FISCAL FOREIGN KEY (NOTA_FISCAL)
                                          REFERENCES GASTOS(NOTA_FISCAL)
                                          ON DELETE CASCADE,
    CONSTRAINT FK_VETERINARIO_GATO FOREIGN KEY (GATO)
                                   REFERENCES GATO(NOME)
                                   ON DELETE CASCADE,
    CONSTRAINT CK_VETERINARIO_GATO CHECK (UPPER(GATO) = GATO)
);

-- CHECAR FUNCAO MEMBRO SE EH FINANCEIRO
CREATE TABLE DOACAO (
    DATAHORA DATE, -- IR ATE SEGUNDOS
    CPF_MEMBRO CHAR(14) NOT NULL,
    FUNCAO_MEMBRO VARCHAR2(10) NOT NULL,
    CPF_DOADOR CHAR(14) NOT NULL,
    QUANTIA NUMBER NOT NULL, -- BOTAR VALOR MINIMO
    CONSTRAINT PK_DOACAO PRIMARY KEY (DATAHORA),
    CONSTRAINT FK_DOACAO_MEMBRO FOREIGN KEY (CPF_MEMBRO, FUNCAO_MEMBRO)
                                REFERENCES MEMBRO(CPF, FUNCAO)
                                ON DELETE CASCADE,
    CONSTRAINT FK_DOACAO_DOADOR FOREIGN KEY (CPF_DOADOR)
                                 REFERENCES DOADOR(CPF)
                                 ON DELETE CASCADE,
    CONSTRAINT CK_DOACAO_FUNCAO_MEMBRO CHECK (FUNCAO_MEMBRO LIKE 'FINANCEIRO'),
    CONSTRAINT CK_DOACAO_CPF_MEMBRO CHECK(REGEXP_LIKE(CPF_MEMBRO, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}')),
    CONSTRAINT CK_DOACAO_QUANTIA CHECK (QUANTIA >= 5)
);

-- SE SEGUNDOS NAO SAO INSERIDOS, O EXTRACT DA ERRO
-- SELECT EXTRACT(SECOND FROM D.DATAHORA) FROM DOACAO D; 

CREATE TABLE AVISTAMENTO (
    DATAHORA DATE,
    DESCRICAO_DO_LOCAL VARCHAR2(100) NOT NULL,
    PESSOA CHAR(14), -- TALVEZ COLOCAR NOT NULL, SE SIM ALTERAR CONSTRAINT FK
    CONSTRAINT PK_AVISTAMENTO PRIMARY KEY (DATAHORA),
    CONSTRAINT FK_AVISTAMENTO_PESSOA FOREIGN KEY (PESSOA)
                                     REFERENCES PESSOA(CPF)
                                     ON DELETE SET NULL,
    CONSTRAINT CK_AVISTAMENTO_PESSOA CHECK(REGEXP_LIKE(PESSOA, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}'))
    
);

-- TEM QUE MUDAR A CHAVE ESTRANGEIRA NO MODELO CONCEITUAL NA TABELA RELACIONA
CREATE TABLE RELACIONA (
    GATO VARCHAR2(20),
    AVISTAMENTO DATE,
    MEMBRO CHAR(14) NOT NULL,
    FUNCAO VARCHAR2(10) NOT NULL,
    CONSTRAINT PK_RELACIONA PRIMARY KEY (GATO, AVISTAMENTO),
    CONSTRAINT FK_RELACIONA_GATO FOREIGN KEY (GATO)
                                 REFERENCES GATO_LIVRE(NOME)
                                 ON DELETE CASCADE,
    CONSTRAINT FK_RELACIONA_AVISTAMENTO FOREIGN KEY (AVISTAMENTO)
                                        REFERENCES AVISTAMENTO(DATAHORA)
                                        ON DELETE CASCADE,
    CONSTRAINT FK_RELACIONA_MEMBRO FOREIGN KEY (MEMBRO, FUNCAO)
                                   REFERENCES MEMBRO(CPF, FUNCAO)
                                   ON DELETE CASCADE,
    CONSTRAINT CK_RELACIONA_MEMBRO CHECK(REGEXP_LIKE(MEMBRO, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}\-[0-9]{2}'))
    
);
